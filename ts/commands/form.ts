import { addUser, cancelUser } from "../api/queue.js";
import { CHAIN } from "../core/actions.js";
import { procedure } from "../core/chain.js";
import { Bot } from "../core/index.js";
import { call, createButtons, getLastCallback, menuProcedure, routeCallback } from "../custom/hooks.js";
import { backButtons } from "./back.js";
import { lands } from "./land.js";
import { landInfoButtons } from "./landinfo.js";
import { $start } from "./start.js";

const applicationTypes = [
  "–Ø –ø—Ä–æ–∂–∏–≤–∞—é –≤ —Ü—ñ–π –∑–µ–º–ª—ñ —Ç–∞ —Ö–æ—á—É –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ —è–∫ —É—á–∞—Å–Ω–∏–∫",
  "–Ø –ø—Ä–æ–∂–∏–≤–∞—é –∑–∞ –º–µ–∂–∞–º–∏ —Ü—ñ—î—ó –∑–µ–º–ª—ñ —ñ —Ö–æ—á—É –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è —è–∫ –≥—ñ—Å—Ç—å",
  "–Ø –≤–∂–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º –ú—Ä—ñ—î—Ç–≤–æ—Ä—Ü—ñ–≤ —ñ –ª–∏—à–µ —Ö–æ—á—É –æ–Ω–æ–≤–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ",
  "–Ø –ø—Ä–æ–∂–∏–≤–∞—é –≤ —Ü—ñ–π –∑–µ–º–ª—ñ —Ç–∞ —Ö–æ—á—É –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ —è–∫ —É—á–∞—Å–Ω–∏–∫",
];

function getLandLinks(land: keyof typeof lands) {
  let links = "";
  for(const name in lands[land][1]) {
    const link = lands[land][1][name];
    links += `üëâ <a href="${link}">${name}</a>\n`;
  }
  return links;
}

export const formButtons = createButtons([
  [["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É", 1]]
]);

export const formFinalButtons = createButtons([
  [["‚ò∞ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", 1]]
]);

export const $cancelForm = procedure();


export const $form = procedure();
menuProcedure($form)
  .send(async state => {
    const data = getLastCallback(state, landInfoButtons);
    // prefilled link with the nickname, land and type of application
    let link = `https://docs.google.com/forms/d/e/1FAIpQLScXb2WboVjGQEFvqUjaEAbY4czn0VEZ3889_gbYxF_L0h708Q/viewform?usp=pp_url&entry.1264022843=${state.core.userId}&entry.1252613343=${encodeURIComponent(lands[state.data.land as keyof typeof lands][0])}&entry.56136220=${encodeURIComponent(applicationTypes[data])}`;
    return `<b><u>–ó–∞—è–≤–∫–∞</u></b>\n\n<i>${lands[state.data.land][0]}</i>\n\n–ó–∞–ø–æ–≤–Ω–∏ —Ñ–æ—Ä–º—É –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –æ—á—ñ–∫—É–π –Ω–∞—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω)!\n\nüëáüëáüëá\n<b><a href="${link}">–§–û–†–ú–ê</a></b>`;
  }, formButtons.get)
  .func(async state => {
    const success = await addUser(state.core.userId);
    try {
      await Bot.deleteMessage(state.core.chatId, state.lastMessageSent.message_id);
    } catch {};
    if(success) return CHAIN.NEXT_ACTION;
    return CHAIN.NEXT_LISTENER;
  })
  .send(async state => {
    return `<b><u>–ó–∞—è–≤–∫–∞</u></b>\n\n–ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ!\n\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç–∏ —Ç–∞ —Ä–µ—Å—É—Ä—Å–∏ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏:\n\n${getLandLinks(state.data.land)}`;
  }, formFinalButtons.get);

export function afterStartInit() {
  routeCallback(formButtons, 1, $cancelForm);
  routeCallback(formFinalButtons, 1, $start);
  $cancelForm.make()
    .func(async state => {
      cancelUser(state.core.userId);
    })
    .func(call($start));
}