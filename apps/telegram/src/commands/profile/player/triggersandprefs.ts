import { $playerPanel } from ".";
import { getSystems } from "../../../api";
import { procedure } from "../../../core/chain";
import { LocalState } from "../../../core/state";
import { buttonsGenerator, getLastCallback, keyboard } from "../../../custom/hooks/buttons";
import { getInputOptionsList } from "../../../custom/hooks/inputs";
import { call } from "../../../custom/hooks/menu";
import { saveValue, saveValueInput, toggleButtons, toggleValue, toggleValueInput } from "../../../custom/hooks/options";
import { StateType } from "../../../custom/hooks/state";
import { GAME_TYPES } from "../../form/register/mapping";
import { text } from "../../form/validators";
import { CONTROL, MENU } from "../../mapping";
import { optionsField } from "../../presets/options";
import { optionsOtherField } from "../../presets/optionsOther";

export const $myTriggers = optionsOtherField<StateType>(
  "lastInput",
  async state => {
    let triggers = state.data.options["playerPanel:triggers"] ?? "";
    if(triggers === "") triggers = "<i>(–Ω–µ–º–∞—î)</i>";
    return `<b><u>üë§–ü—Ä–æ—Ñ—ñ–ª—å: –¢—Ä–∏–≥–µ—Ä–∏ –≤ —ñ–≥—Ä–∞—Ö</u></b>\n\n–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –æ–ø–∏—Å–∞—Ç–∏ –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω—ñ –¥–ª—è —Ç–µ–±–µ —Ç–µ–º–∏ —Ç–∞ —Ä–µ—á—ñ —É —ñ–≥—Ä–∞—Ö.\n\n<b>–¢–≤–æ—ó –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏:</b>\n\n${triggers}`;
  },
  [
    [["‚ùå–û—á–∏—Å—Ç–∏—Ç–∏", CONTROL.clear]],
    [["‚úîÔ∏è–ó–±–µ—Ä–µ–≥—Ç–∏", CONTROL.back]]
  ],
  text(),
  async (state, buttons) => {
    const data = getLastCallback(state, buttons);
    if(data === CONTROL.clear) state.data.options["playerPanel:triggers"] = "";
  },
  saveValueInput("playerPanel:triggers")
);

export const $systemsPreferred = optionsOtherField(
  "lastInput",
  async state => {
    state.data.storage.systems = await getSystems() ?? [];
    const list = getInputOptionsList(state, "playerPanel", "systemsPreferred", text());
    return "<b><u>üë§–ü–∞–Ω–µ–ª—å –ì—Ä–∞–≤—Ü—è: –î–æ—Å–≤—ñ–¥ –≤ –ù–†–Ü</u></b>\n\nüé≤ –£ —è–∫—ñ –ù–∞—Å—Ç—ñ–ª—å–Ω—ñ –†–æ–ª—å–æ–≤—ñ –°–∏—Å—Ç–µ–º–∏ —Ç–∏ –ø–ª–∞–Ω—É—î—à –≥—Ä–∞—Ç–∏?\n\n‚ÑπÔ∏è –¢–∏ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, –≤–≤—ñ–≤—à–∏ —ó—Ö —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n‚ÑπÔ∏è –©–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏–π –≤—Ä—É—á–Ω—É –≤–∞—Ä—ñ–∞–Ω—Ç, –≤–≤–µ–¥–∏ –π–æ–≥–æ –Ω–∞–∑–≤—É —â–µ —Ä–∞–∑!\n\n‚úçÔ∏è<b>–í–≤–µ–¥–µ–Ω—ñ –≤—Ä—É—á–Ω—É:</b> " + list.join("; ");
  },
  toggleButtons<StateType>(
    "playerPanel:systemsPreferred", 
    async state => {
      const buttons = state.data.storage.systems.map(s => {
        return [[s.name, s.id]];
      }) as keyboard;
      return [
        ...buttons, 
        [["‚úîÔ∏è–ó–±–µ—Ä–µ–≥—Ç–∏", CONTROL.back]],
      ];
    }, 
    "‚úÖ ",
    "", 
    CONTROL.back),
  text(),
  toggleValue("playerPanel:systemsPreferred", CONTROL.back),
  toggleValueInput("playerPanel:systemsPreferred")
);

export const $prefferences = optionsField(
  async state => {
    return `<b><u>üë§–ü–∞–Ω–µ–ª—å –ì—Ä–∞–≤—Ü—è: –í–ø–æ–¥–æ–±–∞–Ω–Ω—è –≤ –ù–†–Ü</u></b>`;
  },
  [
    [["üé≤ –ê—Å–ø–µ–∫—Ç–∏ –≥—Ä–∏", MENU.option[0]], ["‚è≥–í–∏–¥–∏ —ñ–≥–æ—Ä", MENU.option[1]]],
    [["üíå–ü–æ—Å–ª–∞–Ω–Ω—è –º–∞–π—Å—Ç—Ä—É", MENU.option[2]]],
    [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back]],
  ]
);

export const $gamesPreferred = optionsField(
  async state => {
    return `<b><u>üë§–ü–∞–Ω–µ–ª—å –ì—Ä–∞–≤—Ü—è: –í–∏–¥–∏ —ñ–≥–æ—Ä</u></b>\n\nüé≤ –Ø–∫—ñ –≤–∏–¥–∏ –ù–†–Ü —Ü—ñ–∫–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —è–∫ –≥—Ä–∞–≤—Ü—è?\n\n<b>‚ÑπÔ∏è –°–µ—Å—ñ—è</b> - –∑–∞–∑–≤–∏—á–∞–π —Ç—Ä–∏–≤–∞—î 3-6 –≥–æ–¥–∏–Ω\n<b>‚ÑπÔ∏è –í–∞–Ω—à–æ—Ç</b> - —Ü—ñ–ª—ñ—Å–Ω–∞ –≥—Ä–∞ –Ω–∞ –æ–¥–Ω—É —Å–µ—Å—ñ—é\n<b>‚ÑπÔ∏è –ú—ñ–Ω—ñ-–∫–∞–º–ø–∞–Ω—ñ—è</b> - –≥—Ä–∞ –¥–æ 5 —Å–µ—Å—ñ–π\n<b>‚ÑπÔ∏è –ö–∞–º–ø–∞–Ω—ñ—è</b> - –≥—Ä–∞, —â–æ —Ç—Ä–∏–≤–∞—î –±—ñ–ª—å—à–µ 5 —Å–µ—Å—ñ–π —ñ –º–æ–∂–µ —Ç—Ä–∏–≤–∞—Ç–∏ –π —Ä–æ–∫–∞–º–∏.`;
  },
  toggleButtons(
    "playerPanel:gamesPreferred",
    [
      [["–í–∞–Ω—à–æ—Ç–∏", GAME_TYPES.one_shot]],
      [["–ú—ñ–Ω—ñ-–∫–∞–º–ø–∞–Ω—ñ—ó", GAME_TYPES.short_campaign]],
      [["–ö–∞–º–ø–∞–Ω—ñ—ó", GAME_TYPES.long_campaign]],
      [["‚úîÔ∏è–ó–±–µ—Ä–µ–≥—Ç–∏", CONTROL.back]],
    ],
    "‚úÖ ",
    "",
    CONTROL.back),
  toggleValue("playerPanel:gamesPreferred", CONTROL.back),
);

export const $textForMaster = optionsOtherField<StateType>(
  "lastInput",
  async state => {
    let message = state.data.options["playerPanel:textForMaster"] ?? "";
    if(message === "") message = "<i>(–Ω–µ–º–∞—î)</i>";
    return `<b><u>üë§–ü–∞–Ω–µ–ª—å –ì—Ä–∞–≤—Ü—è: –ü–æ—Å–ª–∞–Ω–Ω—è –º–∞–π—Å—Ç—Ä—É</u></b>\n\nüíå –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –æ–ø–∏—Å–∞—Ç–∏ —Å–≤–æ—ó –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è. –á—Ö –∑–º–æ–∂–µ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ç–≤—ñ–π –º–∞–π—Å—Ç–µ—Ä.\n\n<b>–¢–≤–æ—ó –ø–æ—Ç–æ—á–Ω—ñ –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è:</b>\n\n${message}`;
  },
  [
    [["‚ùå–û—á–∏—Å—Ç–∏—Ç–∏", CONTROL.clear]],
    [["‚úîÔ∏è–ó–±–µ—Ä–µ–≥—Ç–∏", CONTROL.back]]
  ],
  text(),
  async (state, buttons) => {
    const data = getLastCallback(state, buttons);
    if(data === CONTROL.clear) state.data.options["playerPanel:textForMaster"] = "";
  },
  saveValueInput("playerPanel:textForMaster")
);

export const $prefFight = optionsField<StateType>(
  async state => {
    return `<b><u>üë§–ü–∞–Ω–µ–ª—å –ì—Ä–∞–≤—Ü—è: –í–ø–æ–¥–æ–±–∞–Ω–Ω—è –≤ –ù–†–Ü</u></b>\n\nüé≤ –í–∫–∞–∂–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å <b>–ë–û–ô–û–í–ö–ò</b> –¥–ª—è —Ç–µ–±–µ`;
  },
  getAspectButtons("aspectFight"),
  saveValue("playerPanel:aspectFight", CONTROL.back)
);

export const $prefSocial = optionsField<StateType>(
  async state => {
    return `<b><u>üë§–ü–∞–Ω–µ–ª—å –ì—Ä–∞–≤—Ü—è: –í–ø–æ–¥–æ–±–∞–Ω–Ω—è –≤ –ù–†–Ü</u></b>\n\nüé≤ –í–∫–∞–∂–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å <b>–í–Ü–î–Ü–ì–†–ê–®–£</b> –¥–ª—è —Ç–µ–±–µ`;
  },
  getAspectButtons("aspectSocial"),
  saveValue("playerPanel:aspectSocial")
);

export const $prefExplore = optionsField<StateType>(
  async state => {
    return `<b><u>üë§–ü–∞–Ω–µ–ª—å –ì—Ä–∞–≤—Ü—è: –í–ø–æ–¥–æ–±–∞–Ω–Ω—è –≤ –ù–†–Ü</u></b>\n\nüé≤ –í–∫–∞–∂–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å <b>–î–û–°–õ–Ü–î–ñ–ï–ù–ù–Ø</b> –¥–ª—è —Ç–µ–±–µ`;
  },
  getAspectButtons("aspectExplore"),
  saveValue("playerPanel:aspectExplore")
);

$prefExplore.chain.func<StateType>(async state => {
  state.data.crums.pop();
  state.data.crums.pop();
  state.data.crums.pop();
});

export function getAspectButtons(aspect: "aspectFight" | "aspectSocial" | "aspectExplore") {
  return async function(state: LocalState<StateType>) {
    const asp = state.data.options[`playerPanel:${aspect}`] as number | null;
    const list = new Array(3).fill("").map((v, i) => (i+1) === asp ? " ‚úÖ" : "");
    return [
      [["üü¢ –í–∏—Å–æ–∫–∞" + list[0], 3]],
      [["üü° –°–µ—Ä–µ–¥–Ω—è" + list[1], 2]],
      [["üî¥ –ù–∏–∑—å–∫–∞" + list[2], 1]],
      [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back]],
    ] as keyboard;
  };
}