import { Land } from "../../../../../core/src/entities/land.entity";
import { getUserMemberships, leaveLand } from "../../../api";
import { CHAIN } from "../../../core/actions";
import { keyboard } from "../../../custom/hooks/buttons";
import { saveValue } from "../../../custom/hooks/options";
import { StateType } from "../../../custom/hooks/state";
import { CONTROL, MENU } from "../../mapping";
import { optionsField } from "../../presets/options";

export const $myLandsList = optionsField<StateType>(
  async state => {
    return `<b><u>üìç–ü–∞–Ω–µ–ª—å –û—Å–µ—Ä–µ–¥–∫—ñ–≤: –ú–æ—ó –æ—Å–µ—Ä–µ–¥–∫–∏</u></b>\n\n–û–±–µ—Ä–∏ –æ—Å–µ—Ä–µ–¥–æ–∫, –ø–∞–Ω–µ–ª—å —è–∫–æ–≥–æ —Ö–æ—á–µ—à –≤—ñ–¥–∫—Ä–∏—Ç–∏!`;
  },
  async state => {
    if(!state.data.storage.user) return [];
    const memberships = await getUserMemberships(state.data.storage.user);
    state.data.options["profile:landsById"] = {};
    const lands = memberships.all.map(m => {
      // const mark = l.members.
      const mark = m.member.status === "participant" ? "‚ú® " : "";
      return [[mark + m.land.name, m.land.id]];
    });
    memberships.all.forEach(m => state.data.options["profile:landsById"][m.land.id] = m.land);
    return [...lands, [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back]]] as keyboard;
  },
  saveValue("profile:landId", CONTROL.back)
);

export const $landPanel = optionsField<StateType>(
  async state => {
    if(!state.data.storage.user) return "–ü–û–ú–ò–õ–ö–ê!";
    const landId = state.data.options["profile:landId"];
    const land = state.data.options["profile:chosenLand"] = state.data.options["profile:landsById"][landId] as Land;
    const roles = `\n<b>–¢–≤–æ—ó —Ä–æ–ª—ñ</b>: <i>–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ</i>`;
    const isMember = !!state.data.storage.user.memberships.find(m => m.landId === landId && m.status === "participant");
    const text = isMember ? `–¢–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π(–Ω–∞/–Ω—ñ) —è–∫ –£–ß–ê–°–ù–ò–ö –≤ —Ü—å–æ–º—É –û—Å–µ—Ä–µ–¥–∫—É.` : "–¢–∏ –ì–Ü–°–¢–¨ —É —Ü—å–æ–º—É –æ—Å–µ—Ä–µ–¥–∫—É.";
    // display roles here
    return `<b><u>üìç–ü–∞–Ω–µ–ª—å –û—Å–µ—Ä–µ–¥–∫—ñ–≤: ${land.name}</u></b>\n\n${text}\n${roles}`;
  },
  async state => {
    // add admin options
    if(!state.data.storage.user) return [];
    const land = state.data.options["profile:chosenLand"] as Land;
    const isMember = !!state.data.storage.user.memberships.find(m => m.landId === land.id && m.status === "participant");
    let keyboard: keyboard = [[["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back]]];
    if(!isMember) {
      keyboard = [[["üëã–ü–æ–∫–∏–Ω—É—Ç–∏ –æ—Å–µ—Ä–µ–¥–æ–∫", MENU.option[0]]], ...keyboard];
    }
    else {
      keyboard = [[["üîÅ–ó–º—ñ–Ω–∏—Ç–∏ –æ—Å–µ—Ä–µ–¥–æ–∫*", MENU.option[1]]], ...keyboard];
    }
    return keyboard;
  }
);

export const $leaveLand = optionsField<StateType>(
  async state => {
    const land = state.data.options["profile:chosenLand"] as Land;
    return `<b><u>üìç–ü–∞–Ω–µ–ª—å –û—Å–µ—Ä–µ–¥–∫—ñ–≤: ${land.name}</u></b>\n\n‚ùó–¢–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—à –ø–æ–∫–∏–Ω—É—Ç–∏ –æ—Å–µ—Ä–µ–¥–æ–∫ "${land.name}"?\n\n‚ùó–¢–µ–±–µ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–∞—Ç—ñ–≤ –æ—Å–µ—Ä–µ–¥–∫—É, —Ç–∏ –Ω–µ –∑–º–æ–∂–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —ó—Ö–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ —Ç–≤–æ—ó –º—ñ—Å—Ü–µ–≤—ñ —Ä–æ–ª—ñ –±—É–¥—É—Ç—å –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω—å–æ —Å—Ç–µ—Ä—Ç—ñ!`;
  },
  [
    [["üëã–¢–∞–∫, –ø–æ–∫–∏–Ω—É—Ç–∏", CONTROL.next]],
    [["‚¨ÖÔ∏è–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", CONTROL.back]],
  ],
  async state => {
    if(!state.data.storage.user) return CHAIN.EXIT;
    const res = await leaveLand(state.data.storage.user.id, state.data.options["profile:chosenLand"].id);
    if(!res) return CHAIN.EXIT;
  }
);

export const $landLeft = optionsField<StateType>(
  async state => {
    const land = state.data.options["profile:chosenLand"] as Land;
    return `<b><u>üìç–ü–∞–Ω–µ–ª—å –û—Å–µ—Ä–µ–¥–∫—ñ–≤: ${land.name}</u></b>\n\n‚ùó–¢–∏ –ø–æ–∫–∏–Ω—É–≤(–ª–∞/–ª–∏) –æ—Å–µ—Ä–µ–¥–æ–∫ "${land.name}".\n\n‚ÑπÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—ñ–≤ —Ç–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å —Ç–∏ –º–æ–∂–µ—à –ø—Ä–∏—î–¥–Ω–∞–≤—à–∏—Å—å –∑–Ω–æ–≤—É —è–∫ –≥—ñ—Å—Ç—å!`;
  },
  [
    [["‚¨ÖÔ∏è–ù–∞ –≥–æ–ª–æ–≤–Ω—É", CONTROL.back]],
  ]
);