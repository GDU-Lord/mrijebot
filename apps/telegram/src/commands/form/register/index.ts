import { UserDurationPreference } from "../../../../../core/src/entities/user.entity";
import { afterInit } from "../../../afterInit";
import { createUser, getSystems, getUser, joinLand, setMasterPreferences, setPlayerPreferences } from "../../../api";
import { getLands } from "../../../api/land";
import { getLastCallback, keyboard } from "../../../custom/hooks/buttons";
import { saveValue, toggleButtons, toggleValue, toggleValueInput } from "../../../custom/hooks/options";
import { StateType } from "../../../custom/hooks/state";
import { CONTROL } from "../../mapping";
import { optionsField } from "../../presets/options";
import { optionsOtherField } from "../../presets/optionsOther";
import { textField } from "../../presets/textfield";
import { email, text } from "../../presets/validators";
import { GAME_TYPES, MASTERED, PLAYED, SOURCE } from "./mapping";
import { registerRoutes } from "./routes";

afterInit.push(registerRoutes);

export const $email = textField(
  "form:email", 
  async state => {
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –ö–æ–Ω—Ç–∞–∫—Ç</u></b>\n\nüìß –ù–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–≤–æ—è Email-–∞–¥—Ä–µ—Å–∞, –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞—à–∏–º –≥—É–≥–ª–¥–∏—Å–∫–æ–º —Ç–∞ –∑—Ä—É—á–Ω—ñ—à–æ—ó –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó –∑ —Ç–æ–±–æ—é!\n\n‚ÑπÔ∏è –í–≤–µ–¥–∏ —ó—ó —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ:";
  },
  email()
);

export const $land = optionsField<StateType>(
  async state => {
    const telegramUser = state.lastInput.from;
    state.data.options["form:username"] = telegramUser?.username ? `@${telegramUser.username}` : telegramUser?.first_name ?? null;
    const lands = state.data.storage.lands = await getLands();
    if(!lands) return "–ü–û–ú–ò–õ–ö–ê!";
    const list = lands.map(land => `üìç<b>"${land.name}"</b>:\n${land.region.split(",").map(t => t.trim()).join(", ")}`);
    return `<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –û—Å–µ—Ä–µ–¥–æ–∫</u></b>\n\n–£ –Ω–∞—Å —î —Ä—ñ–∑–Ω—ñ –û—Å–µ—Ä–µ–¥–∫–∏ (—Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏) –ø–æ –≤—Å—ñ–π –ù—ñ–º–µ—á—á–∏–Ω—ñ.\n\n‚ÑπÔ∏è –û–±–µ—Ä–∏ —Ç—É, –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó —è–∫–æ—ó —Ç–∏ –ø—Ä–æ–∂–∏–≤–∞—î—à!\n‚ÑπÔ∏è –ü—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –¥–æ—Å—Ç—É–ø –¥–æ —á–∞—Ç—ñ–≤ —Å–≤–æ–≥–æ –û—Å–µ—Ä–µ–¥–∫—É!\n\n${list.join("\n\n")}`;
  },
  async state => {
    const buttons = state.data.storage.lands.map(land => [[land.name, land.id]]) as keyboard;
    return [
      ...buttons,
      [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back]],
    ]
  },
  saveValue("form:land", CONTROL.back)
);

export const $city = textField(
  "form:city", 
  async state => {
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –û—Å–µ—Ä–µ–¥–æ–∫</u></b>\n\nüìç–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É, –≤ —è–∫–æ–º—É —Ç–∏ –ø—Ä–æ–∂–∏–≤–∞—î—à:";
  },
  text()
);

export const $source = optionsField(
  async state => {
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</u></b>\n\n‚ùî–Ø–∫ —Ç–∏ –¥—ñ–∑–Ω–∞–≤(–ª–∞/–ª–∏)—Å—è –ø—Ä–æ –ú—Ä—ñ—î—Ç–≤–æ—Ä—Ü—ñ–≤?";
  },
  [
    [["Instagram", SOURCE.instagram]],
    [["Linked-In", SOURCE.linked_in]],
    [["–ß–µ—Ä–µ–∑ –∑–Ω–∞–π–æ–º–∏—Ö", SOURCE.friends]],
    [["–ß–∞—Ç-–±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤", SOURCE.chat_bot]],
    [["–Ø –≤–∂–µ —É —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ", SOURCE.community]],
    [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back], ["‚û°Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", SOURCE.none]],
  ],
  saveValue("form:source", CONTROL.back, CONTROL.next)
);

export const $played = optionsField(
  async state => {
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –î–æ—Å–≤—ñ–¥ –≤ –ù–†–Ü</u></b>\n\nüé≤ –ß–∏ –º–∞—î—à —Ç–∏ –¥–æ—Å–≤—ñ–¥ —É –ù–∞—Å—Ç—ñ–ª—å–Ω–∏—Ö –†–æ–ª—å–æ–≤–∏—Ö –Ü–≥—Ä–∞—Ö (–ù–†–Ü)?\n\n‚ùó–Ø–∫—â–æ —Ç–∏ —â–µ –Ω–µ –∑–Ω–∞—î—à —â–æ —Ü–µ - –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –æ–∑–Ω–∞–π–æ–º—Å—è –∑ <a href=\"https://nri.fandom.com/uk/wiki/%D0%9D%D0%B0%D1%81%D1%82%D1%96%D0%BB%D1%8C%D0%BD%D1%96_%D1%80%D0%BE%D0%BB%D1%8C%D0%BE%D0%B2%D1%96_%D1%96%D0%B3%D1%80%D0%B8\">–¶–Ü–Ñ–Æ –°–¢–ê–¢–¢–ï–Æ</a> –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏!";
  },
  [
    [["üé≤ –ú–∞—é –¥–æ—Å–≤—ñ–¥ –≥—Ä–∏", PLAYED.has_experience]],
    [["üëç–ù–µ –º–∞—é –¥–æ—Å–≤—ñ–¥—É, –∞–ª–µ —Ü—ñ–∫–∞–≤–æ", PLAYED.no_experience]],
    [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back]],
  ],
  saveValue("form:played", CONTROL.back)
);

export const $gamesPlayed = optionsField(
  async state => {
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –î–æ—Å–≤—ñ–¥ –≤ –ù–†–Ü</u></b>\n\nüé≤ –°–∫—ñ–ª—å–∫–∏ –≤ —Ç–µ–±–µ –¥–æ—Å–≤—ñ–¥—É –≤ –ù–†–Ü —è–∫ —É –≥—Ä–∞–≤—Ü—è?"
  },
  [
    [["–î–æ 5 —Å–µ—Å—ñ–π", 5]],
    [["–í—ñ–¥ 6 –¥–æ 10 —Å–µ—Å—ñ–π", 10]],
    [["–í—ñ–¥ 11 –¥–æ 50 —Å–µ—Å—ñ–π", 50]],
    [["–ü–æ–Ω–∞–¥ 50 —Å–µ—Å—ñ–π", 100]],
    [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back]],
  ],
  saveValue("form:gamesPlayed", CONTROL.back),
);

export const $systemsPlayed = optionsOtherField<StateType>(
  "lastInput",
  async state => {
    state.data.storage.systems = await getSystems() ?? [];
    const list: string[] = [];
    for(const i in state.data.options) {
      const [part, field, ...rest] = i.split(":");
      const value = rest.join(":");
      const status = state.data.options[i];
      if(part === "form" && field === "systemsPlayed" && text()(value) && status)
        list.push(value);
    }
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –î–æ—Å–≤—ñ–¥ –≤ –ù–†–Ü</u></b>\n\nüé≤ –£ —è–∫–∏—Ö –ù–∞—Å—Ç—ñ–ª—å–Ω–∏—Ö –†–æ–ª—å–æ–≤–∏—Ö –°–∏—Å—Ç–µ–º–∞—Ö —Ç–∏ –º–∞—î—à –¥–æ—Å–≤—ñ–¥ —è–∫ –≥—Ä–∞–≤–µ—Ü—å?\n\n‚ÑπÔ∏è –¢–∏ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, –≤–≤—ñ–≤—à–∏ —ó—Ö —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n‚ÑπÔ∏è –©–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏–π –≤—Ä—É—á–Ω—É –≤–∞—Ä—ñ–∞–Ω—Ç, –≤–≤–µ–¥–∏ –π–æ–≥–æ –Ω–∞–∑–≤—É —â–µ —Ä–∞–∑!\n\n‚úçÔ∏è<b>–í–≤–µ–¥–µ–Ω—ñ –≤—Ä—É—á–Ω—É:</b> " + list.join(";");
  },
  toggleButtons<StateType>(
    "form:systemsPlayed", 
    async state => {
      const buttons = state.data.storage.systems.map(s => {
        return [[s.name, s.id]];
      }) as keyboard;
      return [
        ...buttons, 
        [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back], ["‚û°Ô∏è–î–∞–ª—ñ", CONTROL.next]]
      ];
    },
    "‚úÖ ",
    "",
    CONTROL.back, CONTROL.next),
  text(),
  toggleValue("form:systemsPlayed", CONTROL.back, CONTROL.next),
  toggleValueInput("form:systemsPlayed")
);

export const $playGameTypes = optionsField(
  async state => {
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –î–æ—Å–≤—ñ–¥ –≤ –ù–†–Ü</u></b>\n\nüé≤ –£ —è–∫—ñ –≤–∏–¥–∏ –ù–†–Ü —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å —è–∫ –≥—Ä–∞–≤—Ü—è?\n\n<b>‚ÑπÔ∏è –°–µ—Å—ñ—è</b> - –∑–∞–∑–≤–∏—á–∞–π —Ç—Ä–∏–≤–∞—î 3-6 –≥–æ–¥–∏–Ω\n<b>‚ÑπÔ∏è –í–∞–Ω—à–æ—Ç</b> - —Ü—ñ–ª—ñ—Å–Ω–∞ –≥—Ä–∞ –Ω–∞ –æ–¥–Ω—É —Å–µ—Å—ñ—é\n<b>‚ÑπÔ∏è –ú—ñ–Ω—ñ-–∫–∞–º–ø–∞–Ω—ñ—è</b> - –≥—Ä–∞ –¥–æ 5 —Å–µ—Å—ñ–π\n<b>‚ÑπÔ∏è –ö–∞–º–ø–∞–Ω—ñ—è</b> - –≥—Ä–∞, —â–æ —Ç—Ä–∏–≤–∞—î –±—ñ–ª—å—à–µ 5 —Å–µ—Å—ñ–π —ñ –º–æ–∂–µ —Ç—Ä–∏–≤–∞—Ç–∏ –π —Ä–æ–∫–∞–º–∏.";
  },
  toggleButtons(
    "form:playGameTypes", 
    [
      [["–í–∞–Ω—à–æ—Ç–∏", GAME_TYPES.one_shot]],
      [["–ú—ñ–Ω—ñ-–∫–∞–º–ø–∞–Ω—ñ—ó", GAME_TYPES.short_campaign]],
      [["–î–æ–≤–≥—ñ –∫–∞–º–ø–∞–Ω—ñ—ó", GAME_TYPES.long_campaign]],
      [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back], ["‚û°Ô∏è–î–∞–ª—ñ", CONTROL.next]]
    ], 
    "‚úÖ ",
    "", 
    CONTROL.back, CONTROL.next),
  toggleValue("form:playGameTypes", CONTROL.back, CONTROL.next)
);

export const $mastered = optionsField(
  async state => {
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –î–æ—Å–≤—ñ–¥ –≤ –ù–†–Ü</u></b>\n\nüé≤ –ß–∏ —î –≤ —Ç–µ–±–µ –¥–æ—Å–≤—ñ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö —ñ–≥–æ—Ä (—è–∫ –º–∞–π—Å—Ç–µ—Ä)?\n\n‚ÑπÔ∏è –ú–∞–π—Å—Ç–µ—Ä - —Ü–µ –≤–µ–¥—É—á–∏–π –≥—Ä–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ø—Ä–∞–≤–∏–ª–∞, —Å–≤—ñ—Ç —Ç–∞ –Ω–µ—ñ–≥—Ä–æ–≤–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ —É –Ω—å–æ–º—É.";
  },
  [
    [["–ü—Ä–æ–≤–æ–¥–∏–≤(–ª–∞/–ª–∏) —ñ–≥—Ä–∏", MASTERED.is_master]],
    [["–•–æ—á—É —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏", MASTERED.wants_master]],
    [["–ù–µ –ø—Ä–æ–≤–æ–¥–∏–≤(–ª–∞/–ª–∏) —ñ–≥—Ä–∏ –π –Ω–µ —Ö–æ—á—É", MASTERED.no_master]],
    [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back]],
  ],
  saveValue("form:mastered", CONTROL.back)
);

export const $gamesMastered = optionsField(
  async state => {
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –î–æ—Å–≤—ñ–¥ –≤ –ù–†–Ü</u></b>\n\nüé≤ –°–∫—ñ–ª—å–∫–∏ —Å–µ—Å—ñ–π —Ç–∏ –ø—Ä–æ–≤—ñ–≤/–ø—Ä–æ–≤–µ–ª–∞/–ø—Ä–æ–≤–µ–ª–∏ —è–∫ –º–∞–π—Å—Ç–µ—Ä?";
  },
  [
    [["–î–æ 5 —Å–µ—Å—ñ–π", 5]],
    [["–í—ñ–¥ 6 –¥–æ 10 —Å–µ—Å—ñ–π", 10]],
    [["–í—ñ–¥ 11 –¥–æ 50 —Å–µ—Å—ñ–π", 50]],
    [["–ü–æ–Ω–∞–¥ 50 —Å–µ—Å—ñ–π", 100]],
    [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back]],
  ],
  saveValue("form:gamesMastered", CONTROL.back)
);

export const $systemsMastered = optionsOtherField(
  "lastInput",
  async state => {
    state.data.storage.systems = await getSystems() ?? [];
    const list: string[] = [];
    for(const i in state.data.options) {
      const [part, field, ...rest] = i.split(":");
      const value = rest.join(":");
      const status = state.data.options[i];
      if(part === "form" && field === "systemsMastered" && text()(value) && status)
        list.push(value);
    }
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –î–æ—Å–≤—ñ–¥ –≤ –ù–†–Ü</u></b>\n\nüé≤ –Ø–∫—ñ –ù–∞—Å—Ç—ñ–ª—å–Ω—ñ –†–æ–ª—å–æ–≤—ñ –°–∏—Å—Ç–µ–º–∏ —Ç–∏ –≤–æ–¥–∏–≤(–ª–∞/–ª–∏)?\n\n‚ÑπÔ∏è –¢–∏ –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, –≤–≤—ñ–≤—à–∏ —ó—Ö —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n‚ÑπÔ∏è –©–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–∏–π –≤—Ä—É—á–Ω—É –≤–∞—Ä—ñ–∞–Ω—Ç, –≤–≤–µ–¥–∏ –π–æ–≥–æ –Ω–∞–∑–≤—É —â–µ —Ä–∞–∑!\n\n‚úçÔ∏è<b>–í–≤–µ–¥–µ–Ω—ñ –≤—Ä—É—á–Ω—É:</b> " + list.join(";");
  },
  toggleButtons<StateType>(
    "form:systemsMastered", 
    async state => {
      const buttons = state.data.storage.systems.map(s => {
        return [[s.name, s.id]];
      }) as keyboard;
      return [
        ...buttons, 
        [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back], ["‚û°Ô∏è–î–∞–ª—ñ", CONTROL.next]]
      ];
    }, 
    "‚úÖ ",
    "", 
    CONTROL.back, CONTROL.next),
  text(),
  toggleValue("form:systemsMastered", CONTROL.back, CONTROL.next),
  toggleValueInput("form:systemsMastered")
);

export const $masterGameTypes = optionsField(
  async state => {
    return "<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –î–æ—Å–≤—ñ–¥ –≤ –ù–†–Ü</u></b>\n\n–Ø–∫—ñ –≤–∏–¥–∏ –ù–†–Ü —Ç–∏ —Ö–æ—á–µ—à –≤–æ–¥–∏—Ç–∏ —è–∫ –º–∞–π—Å—Ç–µ—Ä?\n\n‚ÑπÔ∏è <b>–°–µ—Å—ñ—è</b> - –∑–∞–∑–≤–∏—á–∞–π —Ç—Ä–∏–≤–∞—î 3-6 –≥–æ–¥–∏–Ω\n‚ÑπÔ∏è <b>–í–∞–Ω—à–æ—Ç</b> - —Ü—ñ–ª—ñ—Å–Ω–∞ –≥—Ä–∞ –Ω–∞ –æ–¥–Ω—É —Å–µ—Å—ñ—é\n<b>–ú—ñ–Ω—ñ-–∫–∞–º–ø–∞–Ω—ñ—è</b> - –≥—Ä–∞ –¥–æ 5 —Å–µ—Å—ñ–π\n‚ÑπÔ∏è <b>–ö–∞–º–ø–∞–Ω—ñ—è</b> - –≥—Ä–∞, —â–æ —Ç—Ä–∏–≤–∞—î –±—ñ–ª—å—à–µ 5 —Å–µ—Å—ñ–π —ñ –º–æ–∂–µ —Ç—Ä–∏–≤–∞—Ç–∏ —Ä–æ–∫–∞–º–∏."
  },
  toggleButtons(
    "form:masterGameTypes", 
    [
      [["–í–∞–Ω—à–æ—Ç–∏", GAME_TYPES.one_shot]],
      [["–ú—ñ–Ω—ñ-–∫–∞–º–ø–∞–Ω—ñ—ó", GAME_TYPES.short_campaign]],
      [["–î–æ–≤–≥—ñ –∫–∞–º–ø–∞–Ω—ñ—ó", GAME_TYPES.long_campaign]],
      [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back], ["‚û°Ô∏è–î–∞–ª—ñ", CONTROL.next]],
    ], 
    "‚úÖ ",
    "", 
    CONTROL.back, CONTROL.next),
  toggleValue("form:masterGameTypes", CONTROL.back, CONTROL.next)
);

export const $formDone = optionsField<StateType>(
  async state => {
    // fetch land's name
    return `<b><u>üë§–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –ó–∞—Ö–∏—Å—Ç –î–∞–Ω–∏—Ö</u></b>\n\n‚úîÔ∏è–í—Å—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–æ!\n\n‚ÑπÔ∏è –©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–∞–π –¥–æ–∑–≤—ñ–ª –Ω–∞ –æ–±—Ä–æ–±–∫—É —Ü–∏—Ö –¥–∞–Ω–∏—Ö –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—é –†–∞–¥–æ—é –ú—Ä—ñ—î—Ç–≤–æ—Ä—Ü—ñ–≤ —Ç–∞ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ–π–Ω–∏–º –û—Ä–≥–∞–Ω–æ–º –û—Å–µ—Ä–µ–¥–∫—É –ú—Ä—ñ—î—Ç–≤–æ—Ä—Ü—ñ–≤ "${"Berlin"}"`;
  },
  [
    [["‚¨ÖÔ∏è–ù–∞–∑–∞–¥", CONTROL.back], ["‚úÖ –î–∞—é –¥–æ–∑–≤—ñ–ª!", CONTROL.next]],
  ],
  async (state, buttons) => {
    const data = getLastCallback(state, buttons);
    if(data !== CONTROL.next) return;

    const systemsPlayed: number[] = [];
    const systemsMastered: number[] = [];

    const customSystemsPlayed: string[] = [];
    const customSystemsMastered: string[] = [];

    const playGameTypes: UserDurationPreference[] = [];
    const masterGameTypes: UserDurationPreference[] = [];

    for(const i in state.data.options) {
      const parts = i.split(":");
      if(parts[0] === "form") {
        switch (parts[1]) {
          case "systemsPlayed":
            if(!state.data.options[i]) break;
            if(isNaN(+parts[2])) customSystemsPlayed.push(parts[2]);
            else systemsPlayed.push(+parts[2]);
            break;
          case "systemsMastered":
            if(!state.data.options[i]) break;
            if(isNaN(+parts[2])) customSystemsMastered.push(parts[2]);
            else systemsMastered.push(+parts[2]);
            break;
          case "playGameTypes":
            if(!state.data.options[i]) break;
            playGameTypes.push(parts[2] as UserDurationPreference);
            break;
          case "masterGameTypes":
            if(!state.data.options[i]) break;
            masterGameTypes.push(parts[2] as UserDurationPreference);
            break;
        }
      }
    }

    console.log("data", customSystemsPlayed, customSystemsMastered);

    let user = await createUser(
      state.core.userId,
      state.data.options["form:username"],
      state.core.inputs["form:email"]?.text!,
      state.data.options["form:source"],
      state.core.inputs["form:city"]?.text!,
      state.data.options["form:gamesPlayed"] ?? 0,
      state.data.options["form:gamesMastered"] ?? 0,
    );

    console.log("initial", user);

    if(!user) return;

    const playerPrefs = await setPlayerPreferences(
      user.id,
      systemsPlayed,
      systemsPlayed,
      customSystemsPlayed,
      customSystemsPlayed,
      playGameTypes,
      state.data.options["form:gamesPlayed"] ?? 0
    );

    if(!playerPrefs) return;

    console.log("player");

    const masterPrefs = await setMasterPreferences(
      user.id,
      systemsMastered,
      systemsMastered,
      customSystemsMastered,
      customSystemsMastered,
      masterGameTypes,
      state.data.options["form:gamesMastered"] ?? 0,

    );

    if(!masterPrefs) return;

    console.log("master");

    const membership = joinLand(
      user.id, 
      state.data.options["form:land"], 
      "participant"
    );

    if(!membership) return;

    console.log("membership");

    user = await getUser(user.id);

    if(!user) return;

    state.data.storage.user = user;

    console.log(state.data.storage.user);

  }
);

export const $formSent = optionsField(
  async state => {
    return "<b><u>‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ</u></b>\n\n‚ÑπÔ∏è –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —á–∞—Ç—ñ–≤ —Å–≤–æ–≥–æ –û—Å–µ—Ä–µ–¥–∫—É –ú—Ä—ñ—î—Ç–≤–æ—Ä—Ü—ñ–≤!\n\nüëâ–ß–∞—Ç 1\nüëâ–ß–∞—Ç 2\nüëâ–ß–∞—Ç 3";
  },
  [
    [["–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", CONTROL.back]],
  ]
);
